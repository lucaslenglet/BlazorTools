@using System.Diagnostics

@implements IDisposable

@inject ILogger<Button> Logger

@{
    Logger.LogRender(this.GetHashCode());
}

<button class="btn btn-@Style.ToString()" @onclick="OnClickInternal" disabled=@disabled title="@lastExecutionTime">
    @if (!string.IsNullOrWhiteSpace(Value))
    {
        @Value
    }
    else
    {
        @ChildContent
    }
</button>

@code {
    [Parameter,]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ButtonStyle? Style { get; set; } = ButtonStyle.primary;

    [Parameter, CascadingParameter]
    public EventCallbackBucket? OnDisableToggled { get; set; }

    private bool disabled = false;
    private string? lastExecutionTime;
    private EventSubscription eventSubscription;

    public enum ButtonStyle
    {
        primary,
        secondary,
        danger
    }

    protected override void OnInitialized()
    {
        if (OnDisableToggled is not null)
        {
            eventSubscription = OnDisableToggled.Subscribe(() => ToggleDisable(true));
        }
    }

    private async Task OnClickInternal()
    {
        if (!OnClick.HasDelegate || disabled)
        {
            return;
        }

        await using var _ = await LockerBuilder.Create()
            .MinimumTime(TimeSpan.FromMilliseconds(500))
            .ToggleDisableUsing(async () =>
            {
                await ToggleDisable(false);

                if (OnDisableToggled is not null)
                {
                    await OnDisableToggled.InvokeExceptAsync(eventSubscription);
                }
            })
            .BuildAndToggle();

        await OnClick.InvokeAsync();
    }

    private async Task ToggleDisable(bool forceRender)
    {
        disabled = !disabled;

        if (disabled || forceRender)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (OnDisableToggled is not null)
        {
            OnDisableToggled.Unsubscribe(eventSubscription);
        }
    }
}
